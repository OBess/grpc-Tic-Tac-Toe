// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game_service.proto

#include "game_service.pb.h"
#include "game_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GameService {

static const char* GameService_method_names[] = {
  "/GameService.GameService/Connect",
  "/GameService.GameService/Disconnect",
  "/GameService.GameService/MakeStep",
  "/GameService.GameService/GetState",
};

std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameService::Stub> stub(new GameService::Stub(channel));
  return stub;
}

GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(GameService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(GameService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeStep_(GameService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(GameService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GameService::Stub::Connect(::grpc::ClientContext* context, const ::GameService::ConnectRequest& request, ::GameService::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameService::ConnectRequest, ::GameService::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void GameService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::GameService::ConnectRequest* request, ::GameService::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameService::ConnectRequest, ::GameService::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void GameService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::GameService::ConnectRequest* request, ::GameService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameService::ConnectResponse>* GameService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::GameService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameService::ConnectResponse, ::GameService::ConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameService::ConnectResponse>* GameService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::GameService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::Disconnect(::grpc::ClientContext* context, const ::GameService::DisconnectRequest& request, ::GameService::DisconnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameService::DisconnectRequest, ::GameService::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void GameService::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::GameService::DisconnectRequest* request, ::GameService::DisconnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameService::DisconnectRequest, ::GameService::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void GameService::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::GameService::DisconnectRequest* request, ::GameService::DisconnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameService::DisconnectResponse>* GameService::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::GameService::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameService::DisconnectResponse, ::GameService::DisconnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disconnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameService::DisconnectResponse>* GameService::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::GameService::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::MakeStep(::grpc::ClientContext* context, const ::GameService::StepRequest& request, ::GameService::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameService::StepRequest, ::GameService::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeStep_, context, request, response);
}

void GameService::Stub::experimental_async::MakeStep(::grpc::ClientContext* context, const ::GameService::StepRequest* request, ::GameService::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameService::StepRequest, ::GameService::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeStep_, context, request, response, std::move(f));
}

void GameService::Stub::experimental_async::MakeStep(::grpc::ClientContext* context, const ::GameService::StepRequest* request, ::GameService::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameService::StepResponse>* GameService::Stub::PrepareAsyncMakeStepRaw(::grpc::ClientContext* context, const ::GameService::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameService::StepResponse, ::GameService::StepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeStep_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameService::StepResponse>* GameService::Stub::AsyncMakeStepRaw(::grpc::ClientContext* context, const ::GameService::StepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::GetState(::grpc::ClientContext* context, const ::GameService::StateRequest& request, ::GameService::StateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameService::StateRequest, ::GameService::StateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void GameService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::GameService::StateRequest* request, ::GameService::StateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameService::StateRequest, ::GameService::StateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void GameService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::GameService::StateRequest* request, ::GameService::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameService::StateResponse>* GameService::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::GameService::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameService::StateResponse, ::GameService::StateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameService::StateResponse>* GameService::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::GameService::StateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

GameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::GameService::ConnectRequest, ::GameService::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameService::ConnectRequest* req,
             ::GameService::ConnectResponse* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::GameService::DisconnectRequest, ::GameService::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameService::DisconnectRequest* req,
             ::GameService::DisconnectResponse* resp) {
               return service->Disconnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::GameService::StepRequest, ::GameService::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameService::StepRequest* req,
             ::GameService::StepResponse* resp) {
               return service->MakeStep(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::GameService::StateRequest, ::GameService::StateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameService::StateRequest* req,
             ::GameService::StateResponse* resp) {
               return service->GetState(ctx, req, resp);
             }, this)));
}

GameService::Service::~Service() {
}

::grpc::Status GameService::Service::Connect(::grpc::ServerContext* context, const ::GameService::ConnectRequest* request, ::GameService::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::Disconnect(::grpc::ServerContext* context, const ::GameService::DisconnectRequest* request, ::GameService::DisconnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::MakeStep(::grpc::ServerContext* context, const ::GameService::StepRequest* request, ::GameService::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::GetState(::grpc::ServerContext* context, const ::GameService::StateRequest* request, ::GameService::StateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GameService

